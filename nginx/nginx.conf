worker_processes 1;
events { worker_connections 1024; }

http {
    sendfile on;
    upstream tki_shinyproxy {
        server tki_shinyproxy:8080;
    }

    server { # remove this server block if ssl certification is not wanted
      listen 80;
      server_name localhost;

      location / {
        return 301 https://$host$request_uri;
      }
    }

    server {
        listen 443 ssl; # listen 80; # remove first "listen" statement if ssl certification is not wanted
        server_name localhost;

        #### START REMOVE - remove this block of code if SSL certification is not wanted

        # Certificates - change these so they are relevant to the site
        ssl_certificate     /root/certs/example.com/example.com.crt; #### UPDATE THIS LINE ####
        ssl_certificate_key /root/certs/example.com/example.com.key; #### UPDATE THIS LINE ####

        # SSL optimization
        ssl_session_cache shared:SSL:20m;
        ssl_session_timeout 180m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

        #### END REMOVE

        location / {
          proxy_pass         http://tki_shinyproxy;

          proxy_http_version 1.1;
          proxy_set_header   Upgrade $http_upgrade;
          proxy_set_header   Connection "upgrade";
          proxy_read_timeout 600s;
          proxy_buffering    off;

          proxy_redirect     off;
          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
}
